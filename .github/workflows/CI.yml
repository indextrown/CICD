# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

# CI(Continuous Integration)
#- 지속적인 통합
#- 버그 수정이나 새로 만드는 기능들이 특정 repository에 주기적으로 빌드되고 테스트되어서 merge 되는 것이다.
#- 개발자들은 코드 변경사항을 주기적으로 merge 해야한다.
#- 주기적으로 merge된 코드의 변경사항이 자동으로 빌드되어 Build 성공 유무를 확인해야한다.
#- 기존의 시스템에 다른 버그를 초래하지 않았는지 자동으로 Test까지 되어야 한다.

# 워크플로우 이름
name: CI

# 트리거 조건(on)
# push: main 브랜치에 push 이벤트 발생시 워크플로우 실행
# push requset: main 브랜치를 대상으로 하는 pull request가 생성되거나 업데이트시 워크플로우 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 작업 정의
jobs:
  build:
    # 작업이 실행될 환경을 지정
    runs-on: macos-latest

    # 워크플로우 단계(Steps) 정의
    steps:
    
    # 1. 리포지토리 체크아웃 단계 - GitHub의 공식 checkout 액션을 사용하여 리포지토리의 코드를 워크플로우 환경을 가져온다.
    - uses: actions/checkout@v4
    
    # 2. 지정한 Xcode 버전으로 환경 설정
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: "16.1.0"
    
    # 3. 빌드단계 - Build라는 이름으로 이 단계를 식별, -v 옵션으로 빌드 과정 상세히 출력
    - name: Start xcode build 🛠
      run: |
        xcodebuild clean build \
          -project CICD.xcodeproj \
          -scheme CICD \
          -destination "platform=iOS Simulator,name=iPhone 15 Pro Max,OS=17.5"
      
    # 4. 테스트 실행 단계 - swift test -v 명령어를 실행하여 Swift 프로젝트의 테스트를 실행
#      - name: Run tests
#        run: |
#          xcodebuild clean test \
#            -project CI-CD.xcodeproj \
#            -scheme CI-CD \
#            -destination "platform=iOS Simulator,name=iPhone 15 Pro Max,OS=17.5"
