name: Deploy to TestFlight

on:
  push:
    branches: [ "release" ]

jobs:
  deploy:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      # 임시 키체인 생성 및 설정
      - name: Configure Keychain
        run: |
          security create-keychain -p "" test.keychain
          security list-keychains -s test.keychain
          security default-keychain -s test.keychain
          security unlock-keychain -p "" test.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/test.keychain

      # 인증서 임포트 및 파티션 리스트 설정
      - name: Import Certificate and Set Key Partition List
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -k test.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" test.keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # 프로비저닝 프로파일 설치
      - name: Install Provisioning Profile
        run: |
          echo "$PROVISIONING_PROFILE" | base64 --decode > provisioning.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp provisioning.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}

      # Xcode 설정
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1.0"

      # API 키 파일 생성: AuthKey 파일을 생성해서 altool이 찾도록 함.
      - name: Create API Key File
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY }}.p8
          chmod 600 ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY }}.p8
        env:
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          
      # 자동 빌드 번호 증가 (agvtool 사용)
      - name: Increase Build Number
        run: |
          # 프로젝트 디렉토리 내에서 agvtool 명령어를 실행합니다.
          CURRENT_BUILD=$(agvtool what-version -terse)
          echo "Current build number: $CURRENT_BUILD"
          NEW_BUILD=$((CURRENT_BUILD + 1))
          echo "Setting new build number: $NEW_BUILD"
          agvtool new-version -all $NEW_BUILD
          # 변경된 버전 확인
          agvtool what-version -terse

      # Archive & Export 단계
      - name: Archive & Export
        run: |
          xcodebuild archive \
            -project CICD.xcodeproj \
            -scheme CICD \
            -configuration Release \
            -archivePath build/CICD.xcarchive \
            CODE_SIGN_IDENTITY="iPhone Distribution: donghyeon kim (LGX4B4WC66)" \
            PROVISIONING_PROFILE_SPECIFIER="CICD GItActions" \
            CODE_SIGN_STYLE=Manual \
            OTHER_CODE_SIGN_FLAGS="--timestamp=none"
          xcodebuild -exportArchive \
            -archivePath build/CICD.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/CICD \
            OTHER_CODE_SIGN_FLAGS="--timestamp=none"

      # TestFlight 업로드
      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app -f build/CICD/CICD.ipa -t ios \
            --apiKey "$APP_STORE_CONNECT_API_KEY" --apiIssuer "$APP_STORE_CONNECT_API_ISSUER"
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APP_STORE_CONNECT_API_ISSUER: ${{ secrets.APP_STORE_CONNECT_API_ISSUER }}


